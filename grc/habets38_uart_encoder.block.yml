id: habets38_uart_encoder
label: UART Encoder
category: '[habets38]'

templates:
  imports: import habets38
  make: habets38.uart_encoder(${start}, ${bits}, ${parity}, ${stop})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: start
  label: "Start bits"
  dtype: int
  default: 1
- id: bits
  label: "Data bits"
  dtype: int
  default: 8
- id: stop
  label: "Stop bits"
  dtype: int
  default: 1
- id: parity
  label: "Parity bits"
  dtype: int
  default: 0

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: "in"
  dtype: short

outputs:
- label: "out"
  dtype: byte

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
